<!doctype html>
<html lang="id">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Absensi</title>
<link rel="icon" href="data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'%3E%3Crect x='8' y='10' width='48' height='46' rx='6' ry='6' fill='%23ffffff' stroke='%23000' stroke-width='3'/%3E%3Crect x='20' y='6' width='24' height='10' rx='4' ry='4' fill='%23ffffff' stroke='%23000' stroke-width='3'/%3E%3Cpath d='M18 36l9 9 19-19' fill='none' stroke='%2306a66a' stroke-width='6' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E">
<style>
  :root{
    --bg:#ffffff; --card:#ffffff; --text:#111827; --muted:#6b7280; --border:#e5e7eb;
    --head:#f3f4f6; --sticky:#ffffff;
    --sakit:#fee2e2; --alpa:#ef4444; --izin:#dbeafe; --han:#fef3c7; --holiday:#f3f4f6;
    --score-low:#b91c1c;
  }
  *{box-sizing:border-box}
  html,body{margin:0;padding:0;background:var(--bg);color:var(--text);
    font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Helvetica Neue",Arial}
  .wrap{padding:16px}
  h1{margin:0 0 8px;font-size:1.7rem}

  .classbar{display:flex;gap:8px;flex-wrap:wrap;align-items:center;margin:8px 0 4px}
  .classbar select, .classbar button{border:1px solid var(--border);background:#fff;color:var(--text);padding:8px 12px;border-radius:10px;font-weight:600}
  .classbar .danger{border-color:#b91c1c;color:#b91c1c}

  .titlebar{display:flex;gap:10px;align-items:center;margin:8px 0 6px}
  .title-input{flex:1;max-width:520px;border:1px solid var(--border);border-radius:10px;padding:8px 12px;font-weight:700;background:#fff;color:var(--text)}
  .subtitle{color:var(--muted);margin-bottom:10px}
  .toolbar{display:flex;flex-wrap:wrap;gap:8px;align-items:center;margin:10px 0}
  select,button,input{border:1px solid var(--border);background:#fff;color:var(--text);padding:8px 12px;border-radius:10px;font-weight:600}
  button.primary{background:#2563eb;color:#fff;border-color:#2563eb}
  button.danger{background:#fff;color:#b91c1c;border-color:#b91c1c}
  input[type="number"].score{width:90px;padding:6px 8px;border-radius:8px;background:#fff;color:var(--text)}
  .note{color:var(--muted);font-size:.9rem}
  .muted{color:var(--muted)}

  .table-wrap{overflow:auto;border:1px solid var(--border);border-radius:12px;background:var(--card);-webkit-overflow-scrolling:touch}
  table{border-collapse:separate;border-spacing:0;width:max-content;min-width:100%}
  th,td{border:1px solid var(--border);padding:6px 8px;text-align:center;white-space:nowrap;vertical-align:middle}
  thead th{background:var(--head);font-weight:700}
  thead tr:nth-child(1) th{position:sticky;top:0;z-index:3;background:var(--sticky)}
  thead tr:nth-child(2) th{position:sticky;top:36px;z-index:3;background:var(--head)}
  th.sticky,td.sticky{position:sticky;left:0;background:#fff;z-index:2;text-align:left}
  th.sticky.no,td.sticky.no{width:52px;left:0;text-align:center}
  th.sticky.name,td.sticky.name{left:52px;z-index:3}
  select.cell{padding:4px 6px;border-radius:8px;background:#fff;color:var(--text)}
  .cell-stack{display:flex;flex-direction:column;gap:6px;align-items:center;justify-content:center;min-width:120px}
  .cell-inline{display:flex;gap:6px;align-items:center;justify-content:center}
  .sakit{background:var(--sakit)!important}
  .alpa{background:var(--alpa)!important;color:#fff}
  .izin{background:var(--izin)!important}
  .han{background:var(--han)!important}
  .holiday{background:var(--holiday)!important;color:#6b7280}

  .totals-head{background:#f3f4f6!important}
  .totals-cell{background:#fafafa;font-weight:700}
  .avg-col{background:#eef2ff}
  .low-score{background:var(--score-low)!important;color:#fff!important}
  .avg-low{background:#b91c1c!important;color:#fff!important}

  .name-box{display:flex;gap:6px;align-items:center;flex-wrap:wrap}
  .name-input{padding:6px 8px;border:1px solid var(--border);border-radius:8px;min-width:220px;background:#fff;color:var(--text)}
  .act-btn{padding:4px 8px;border-radius:8px}
  .mini-fill{padding:4px 8px;border-radius:8px}

  .date-head{position:relative}
  .mini-btn{position:absolute; top:2px; right:2px; border:1px solid var(--border); background:#fff; border-radius:6px; font-size:10px; line-height:1; padding:2px 6px; cursor:pointer; color:var(--text);}
  .mini-del{position:absolute; top:2px; right:26px; border:1px solid #b91c1c; background:#fff; border-radius:6px; font-size:10px; line-height:1; padding:2px 6px; cursor:pointer; color:#b91c1c;}

  #printSummary{display:none;color:#111}
  #printSummary h2{margin:8px 0 12px}
  #printSummary .meta{color:#374151;margin-bottom:8px}
  #printSummary table{width:100%;border-collapse:collapse}
  #printSummary th,#printSummary td{border:1px solid #000;padding:6px 8px;text-align:center}
  #printSummary th{text-align:center;background:#f3f4f6}
  #printSummary .col-no{width:36px}

  /* === PRINT: tampilan jelas & proporsional === */
  @page { size: A4 portrait; margin: 8mm 10mm; }
  @media print{
    .classbar,.toolbar,.note,.subtitle,.titlebar,h1,.table-wrap{display:none !important}
    #printSummary{display:block !important; font-family: Arial, Helvetica, sans-serif; font-size:11pt}
    body{background:#fff}
    *{ -webkit-print-color-adjust:exact; print-color-adjust:exact; }
  }
  #printSummary table{
    width:100%;
    border-collapse:collapse;
    table-layout:auto;              /* kolom menyesuaikan konten */
    border:1pt solid #000;
  }
  #printSummary th,
  #printSummary td{
    border:1pt solid #000 !important;
    padding:6px 8px;
    text-align:center;
    white-space:nowrap;
  }
  #printSummary thead th{ background:#f3f4f6 !important; }
  #printSummary .col-no{width:14mm}
  #printSummary th:nth-child(3),
  #printSummary th:nth-child(4),
  #printSummary th:nth-child(5),
  #printSummary th:nth-child(6),
  #printSummary th:nth-child(7),
  #printSummary th:nth-child(8),
  #printSummary th:nth-child(9){min-width:12mm}
  #printSummary tr{ page-break-inside:avoid; }

  @media (max-width:640px){
    .titlebar{flex-direction:column;gap:6px}
    .title-input{max-width:100%}
    .toolbar{display:grid;grid-template-columns:1fr 1fr;gap:8px}
    .toolbar>*{width:100%}
    th,td{padding:6px}
    th.sticky.no,td.sticky.no{width:44px}
    th.sticky.name,td.sticky.name{left:44px;max-width:180px;overflow:hidden}
    .name-input{width:100%;font-size:14px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}
    select.cell{max-width:120px}
    input.score{width:78px}
  }

  .modal-backdrop{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;align-items:center;justify-content:center;z-index:50;padding:16px}
  .modal{background:#fff;border:1px solid #000;border-radius:12px;max-width:680px;width:100%}
  .modal header{padding:12px 14px;border-bottom:1px solid #000;font-weight:700}
  .modal main{padding:14px}
  .modal footer{padding:12px 14px;border-top:1px solid #000;display:flex;gap:8px;flex-wrap:wrap;justify-content:flex-end}
  .modal button{border:1px solid #000;border-radius:10px;padding:8px 12px}
  .modal .danger{border-color:#b91c1c;color:#b91c1c;background:#fff}
  .modal .primary{background:#2563eb;color:#fff;border-color:#2563eb}
  .modal textarea{width:100%;min-height:160px;border:1px solid #000;border-radius:8px;padding:10px;font-family:ui-monospace,Menlo,Consolas,monospace}
  .modal .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:8px}
</style>
</head>
<body>
<div class="wrap">
  <h1>Absensi</h1>

  <div class="classbar">
    <label for="classSel"><b>Kelas:</b></label>
    <select id="classSel"></select>
    <button id="btnNewClass">Kelas Baru</button>
    <button id="btnDupClass">Duplikat</button>
    <button class="danger" id="btnDelClass">Hapus</button>
    <button id="btnBulkAdd">Tambah Nama Massal</button>
    <button id="btnSetOrder">Atur Urutan Mutlak</button>
  </div>

  <div class="titlebar">
    <label for="titleInput">Nama kelas aktif:</label>
    <input id="titleInput" class="title-input" placeholder="Nama kelas…" />
  </div>

  <div class="subtitle">
    Selasa & Kamis punya kolom <i>taisou</i>. Sabtu bisa input nilai (termasuk minus). Minggu non-aktif.
  </div>

  <div class="toolbar">
    <label for="monthSel">Pilih Bulan:</label>
    <select id="monthSel">
      <option value="september">Absensi September</option>
      <option value="oktober">Absensi Oktober</option>
      <option value="november">Absensi November</option>
    </select>

    <button class="primary" id="btnClear">Clear All</button>
    <button id="btnPrint">Cetak / PDF</button>
    <button id="btnSave">Unduh JSON</button>
    <button id="btnLoad">Muat JSON…</button>

    <button id="btnSortAZ">Urut A→Z</button>
    <button id="btnSortMutlak">Urut Mutlak</button>

    <span class="add-wrap">
      <input type="text" id="newName" placeholder="Tambah nama… (Enter)" />
      <button id="btnAdd">Tambah</button>
    </span>
    <input type="file" id="fileInput" accept="application/json" style="display:none" />
  </div>

  <div class="note">
    Nilai &lt; 70 diwarnai merah. Tombol <b>＋</b> di header = isi nilai otomatis per <b>tanggal</b>.  
    Tombol <b>＋ Nilai</b> di tiap nama = isi nilai otomatis per <b>nama</b> (rentang tanggal).
  </div>

  <div class="table-wrap">
    <table id="absensi">
      <thead id="thead"></thead>
      <tbody id="tbody"></tbody>
    </table>
  </div>

  <div id="printSummary">
    <h2 id="psTitle">Rekap Absensi</h2>
    <div class="meta" id="psMeta"></div>
    <table>
      <thead>
        <tr>
          <th class="col-no">No.</th>
          <th style="text-align:left">Nama</th>
          <th>Hadir</th>
          <th>Sakit</th>
          <th>Izin</th>
          <th>Alpa</th>
          <th>半</th>
          <th>Izin Taisou</th>
          <th>Tidak Taisou</th>
          <th>Rata-rata Nilai</th>
        </tr>
      </thead>
      <tbody id="psBody"></tbody>
    </table>
  </div>
</div>

<!-- ===== Modals ===== -->
<div class="modal-backdrop" id="printModal">
  <div class="modal">
    <header>Pilih urutan untuk rekap cetak</header>
    <main><p>Urutan ini hanya memengaruhi <b>rekap cetak/PDF</b>, tidak mengubah tampilan tabel.</p></main>
    <footer>
      <button id="printCancel">Cancel</button>
      <button class="primary" id="printOrderRank">Ranking (rata-rata)</button>
      <button class="primary" id="printOrderAbjad">Abjad (A→Z)</button>
      <button class="primary" id="printOrderMutlak">Mutlak/Awal</button>
    </footer>
  </div>
</div>

<div class="modal-backdrop" id="orderModal">
  <div class="modal">
    <header>Pilih urutan untuk pengisian nilai tanggal ini</header>
    <main><p>Urutan ini hanya menentukan urutan input nilai otomatis.</p></main>
    <footer>
      <button id="orderCancel">Cancel</button>
      <button class="primary" id="orderAbjad">Abjad (A→Z)</button>
      <button class="primary" id="orderMutlak">Mutlak/Awal</button>
    </footer>
  </div>
</div>

<div class="modal-backdrop" id="clearDayModal">
  <div class="modal">
    <header>Hapus data di tanggal ini</header>
    <main><p id="clearDayLabel">Tanggal: —</p><p>Pilih aksi yang diinginkan:</p></main>
    <footer>
      <button id="clearDayCancel">Cancel</button>
      <button class="danger" id="clearDayBoth">Hapus nilai + absensi</button>
      <button class="primary" id="clearDayScores">Hapus nilai saja</button>
    </footer>
  </div>
</div>

<!-- Isi nilai otomatis PER NAMA -->
<div class="modal-backdrop" id="rowFillModal">
  <div class="modal">
    <header>Isi Nilai Otomatis — <span id="rowFillName"></span></header>
    <main>
      <div class="grid">
        <div>
          <label>Dari tanggal</label>
          <input type="number" id="rowFillStart" min="1" max="31" value="1">
        </div>
        <div>
          <label>Sampai tanggal</label>
          <input type="number" id="rowFillEnd" min="1" max="31" value="30">
        </div>
      </div>
      <p class="muted" style="margin:6px 0 8px">Minggu otomatis dilewati. Sabtu boleh nilai negatif (−100..100).</p>
      <label>Nilai (pisahkan spasi, koma, atau baris baru)</label>
      <textarea id="rowFillValues" placeholder="cth: 80 85 90 -5 100"></textarea>
    </main>
    <footer>
      <button id="rowFillCancel">Cancel</button>
      <button class="primary" id="rowFillApply">Terapkan</button>
    </footer>
  </div>
</div>

<!-- Tambah nama massal -->
<div class="modal-backdrop" id="bulkAddModal">
  <div class="modal">
    <header>Tambah nama massal</header>
    <main>
      <p>Tempel daftar nama (satu baris satu nama).</p>
      <textarea id="bulkAddArea" placeholder="Tempel daftar nama di sini…"></textarea>
      <label style="display:flex;gap:8px;align-items:center;margin-top:8px">
        <input type="checkbox" id="bulkReplace">
        <span>Ganti semua nama yang ada (data absensi akan direset)</span>
      </label>
    </main>
    <footer>
      <button id="bulkAddCancel">Cancel</button>
      <button class="primary" id="bulkAddApply">Tambahkan</button>
    </footer>
  </div>
</div>

<!-- Atur urutan mutlak -->
<div class="modal-backdrop" id="orderEditModal">
  <div class="modal">
    <header>Atur Urutan Mutlak</header>
    <main>
      <p>Tempel urutan nama (satu baris satu nama). Nama yang tidak ada di daftar akan ditempatkan setelahnya.</p>
      <textarea id="orderEditArea" placeholder="Tempel urutan nama mutlak di sini…"></textarea>
      <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:8px">
        <button id="orderFillFromPeople">Isi dari daftar nama saat ini</button>
        <button id="orderFillFromAbsolute">Isi dari urutan mutlak saat ini</button>
      </div>
    </main>
    <footer>
      <button id="orderEditCancel">Cancel</button>
      <button class="primary" id="orderEditApply">Simpan Urutan</button>
    </footer>
  </div>
</div>

<script>
/* ===== Util & Konst ===== */
const MONTHS = ['september','oktober','november'];
const rangeDates=(y,m)=>{const f=new Date(y,m,1),l=new Date(y,m+1,0),arr=[];for(let d=new Date(f);d<=l;d.setDate(d.getDate()+1))arr.push(new Date(d));return arr;};
const DATES={september:rangeDates(2025,8),oktober:rangeDates(2025,9),november:rangeDates(2025,10)};
const isSunday=d=>d.getDay()===0, isSaturday=d=>d.getDay()===6, isWeekend=d=>isSunday(d)||isSaturday(d);
const needsTaisouWeekday=d=>[2,4].includes(d.getDay());
const toLocalYMD=d=>`${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`;
const fmtMonth=d=>d.toLocaleDateString('id-ID',{month:'long',year:'numeric'});
const fmtDay=d=>`${d.toLocaleDateString('id-ID',{day:'2-digit'})}<br>${d.toLocaleDateString('id-ID',{weekday:'short'})}`;
const deepClone=o=>JSON.parse(JSON.stringify(o));
const slug=s=>s.toLowerCase().trim().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
const normalizeName=s=>s.replace(/\s+/g,' ').trim();
const parseNames=txt=>String(txt||'').split(/\r?\n/).map(normalizeName).filter(Boolean);

/* ===== State Multi-kelas ===== */
let CLASSES = {};
let ACTIVE_ID = null;

(function initDefault(){
  const defaultNames=["ZASKIA AMILA","VANIA PUTRI TARISA","AIFI DEWI ANGGRAINI","SAVIRA ALMAS NUR ARIFIN","SYAKILLA MAGHFIRUHA","MELDA DWI ENIKE","FERDIAN FARREL KRISTIAWAN","AHMAD NUR MUJAHIDIN","TAUFIQ HIDAYAT","IMEL BR SIMBOLON","YULIASTRI PATANDUK","FRANCISKUS SIMAMORA","VELIN FARDENCITA","RICHIE RAJASWA WIBOWO","LINDA NUR'AINI","WIDYA NIDYA AMELIA","YESITA DYANING PRASANTI","RIYAN DWI AGATA"];
  const people=defaultNames.map(n=>({name:n}));
  const absoluteOrder=defaultNames.map(n=>n.toUpperCase());
  const values={september:people.map(()=> DATES.september.map(()=>({a:'',t:'',s:null}))),
                oktober:  people.map(()=> DATES.oktober.map(()=>({a:'',t:'',s:null}))),
                november: people.map(()=> DATES.november.map(()=>({a:'',t:'',s:null})))};
  const id='n4-rasen';
  CLASSES[id]={id,name:'Kelas N4 Rasen',absoluteOrder,people,values};
  ACTIVE_ID=id;
})();

const classSel=document.getElementById('classSel');
const titleInput=document.getElementById('titleInput');

/* bind globals supaya kode tabel tetap jalan */
let TITLE='', ABSOLUTE_ORDER=[], PEOPLE=[], DATA={};
function pullFromActive(){const C=CLASSES[ACTIVE_ID]; TITLE=C.name; ABSOLUTE_ORDER=C.absoluteOrder; PEOPLE=C.people; DATA=C.values; titleInput.value=TITLE;}
function pushToActive(){const C=CLASSES[ACTIVE_ID]; C.name=TITLE; C.absoluteOrder=ABSOLUTE_ORDER; C.people=PEOPLE; C.values=DATA;}

/* ===== Kelas UI ===== */
function refreshClassSelector(){classSel.innerHTML=''; Object.values(CLASSES).forEach(c=>{const o=document.createElement('option');o.value=c.id;o.textContent=c.name;classSel.appendChild(o);}); classSel.value=ACTIVE_ID; pullFromActive();}
refreshClassSelector();

function newClass(){let name=prompt('Nama kelas baru:','Kelas Baru'); if(!name) return; let idBase=slug(name)||'kelas',id=idBase,i=1; while(CLASSES[id]) id=idBase+'-'+(i++); CLASSES[id]={id,name,absoluteOrder:[],people:[],values:{september:[],oktober:[],november:[]}}; ACTIVE_ID=id; refreshClassSelector(); renderAll();}
function dupClass(){const C=CLASSES[ACTIVE_ID]; let name=prompt('Nama duplikat kelas:',C.name+' (Copy)'); if(!name) return; let idBase=slug(name)||'kelas',id=idBase,i=1; while(CLASSES[id]) id=idBase+'-'+(i++); CLASSES[id]={id,name,absoluteOrder:deepClone(C.absoluteOrder),people:deepClone(C.people),values:deepClone(C.values)}; ACTIVE_ID=id; refreshClassSelector(); renderAll();}
function delClass(){if(Object.keys(CLASSES).length<=1){alert('Minimal harus ada 1 kelas.');return;} if(!confirm('Hapus kelas "'+CLASSES[ACTIVE_ID].name+'"?')) return; delete CLASSES[ACTIVE_ID]; ACTIVE_ID=Object.keys(CLASSES)[0]; refreshClassSelector(); renderAll();}
classSel.addEventListener('change',()=>{ACTIVE_ID=classSel.value; pullFromActive(); renderAll();});
document.getElementById('btnNewClass').addEventListener('click',newClass);
document.getElementById('btnDupClass').addEventListener('click',dupClass);
document.getElementById('btnDelClass').addEventListener('click',delClass);
titleInput.addEventListener('input',()=>{TITLE=titleInput.value; pushToActive(); refreshClassSelector();});

/* ===== Tabel ===== */
const thead=document.getElementById('thead'), tbody=document.getElementById('tbody'), monthSel=document.getElementById('monthSel');

const applyTDColor=(td,val)=>{td.classList.remove('sakit','alpa','izin','han'); if(val==='sakit') td.classList.add('sakit'); else if(val==='alpa') td.classList.add('alpa'); else if(val==='izin') td.classList.add('izin'); else if(val==='半') td.classList.add('han');};
const setScoreVisual=(el,raw)=>{const n=(raw===null||raw==='')?null:Number(raw); if(n!==null&&!isNaN(n)&&n<70) el.classList.add('low-score'); else el.classList.remove('low-score');};

function buildHeader(monthKey){
  thead.innerHTML='';
  const dates=DATES[monthKey];
  const tr1=document.createElement('tr'), tr2=document.createElement('tr');

  const thNo=document.createElement('th'); thNo.className='sticky no'; thNo.rowSpan=2; thNo.textContent='No.'; tr1.appendChild(thNo);
  const thName=document.createElement('th'); thName.className='sticky name'; thName.rowSpan=2; thName.textContent='Nama Siswa'; tr1.appendChild(thName);

  const thMonth=document.createElement('th'); thMonth.colSpan=dates.length+8; thMonth.textContent=fmtMonth(dates[0]); tr1.appendChild(thMonth);

  for(let c=0;c<dates.length;c++){
    const d=dates[c]; const th=document.createElement('th'); th.className='date-head'; th.innerHTML=fmtDay(d);
    if(isWeekend(d)) th.classList.add('holiday');
    if(!isSunday(d)){
      const del=document.createElement('button'); del.className='mini-del'; del.textContent='🗑'; del.title='Hapus nilai/absensi di tanggal ini'; del.addEventListener('click',()=>openClearDayModal(monthKey,c));
      const plus=document.createElement('button'); plus.className='mini-btn'; plus.textContent='＋'; plus.title='Tambah Nilai Otomatis (Mutlak / Abjad)'; plus.addEventListener('click',()=>bulkFillForDate(monthKey,c));
      th.appendChild(del); th.appendChild(plus);
    }
    tr2.appendChild(th);
  }

  ['Hadir','Sakit','Izin','Alpa','半','Izin Taisou','Tidak Taisou','Rata-rata Nilai'].forEach(t=>{
    const th=document.createElement('th'); th.textContent=t; th.className='totals-head'+(t.includes('Nilai')?' avg-col':''); tr2.appendChild(th);
  });

  thead.appendChild(tr1); thead.appendChild(tr2);
}

function buildCellContent(td,obj,rIdx,cIdx,monthKey,date){
  if(isSunday(date)){ td.innerHTML='<span class="muted">—</span>'; return; }

  if(isSaturday(date)){
    td.classList.add('holiday');
    const wrap=document.createElement('div'); wrap.className='cell-inline';

    const selT=document.createElement('select'); selT.className='cell';
    ['', 'hadir taisou', 'izin taisou', 'tidak hadir taisou'].forEach(v=>{const o=document.createElement('option');o.value=v;o.textContent=v||'';selT.appendChild(o);});
    selT.value=obj.t||''; selT.addEventListener('change',()=>{obj.t=selT.value; updateTotalsCells(td.parentElement,monthKey,rIdx);});
    wrap.appendChild(selT);

    const score=document.createElement('input'); score.type='number'; score.className='score'; score.min='-100'; score.max='100'; score.step='1'; score.placeholder='Nilai';
    score.value=(obj.s===null||obj.s==='')?'':obj.s;
    const onScore=()=>{let v=String(score.value||'').trim(); if(v===''){obj.s=null; setScoreVisual(score,null);} else{let n=Number(v); if(isNaN(n)) n=null; else n=Math.max(-100,Math.min(100,n)); obj.s=n; setScoreVisual(score,n);} updateTotalsCells(td.parentElement,monthKey,rIdx);};
    ['input','change','keyup','blur'].forEach(e=>score.addEventListener(e,onScore));
    wrap.appendChild(score);

    td.appendChild(wrap);
    setScoreVisual(score,obj.s);
    return;
  }

  const wrap=document.createElement('div'); wrap.className=needsTaisouWeekday(date)?'cell-stack':'cell-inline';

  const selMain=document.createElement('select'); selMain.className='cell';
  ['','hadir','sakit','izin','alpa','半'].forEach(v=>{const o=document.createElement('option');o.value=v;o.textContent=v||'';selMain.appendChild(o);});
  selMain.value=obj.a||''; selMain.addEventListener('change',()=>{obj.a=selMain.value; applyTDColor(td,obj.a); updateTotalsCells(td.parentElement,monthKey,rIdx);});
  wrap.appendChild(selMain);

  if(needsTaisouWeekday(date)){
    const selT=document.createElement('select'); selT.className='cell';
    ['', 'hadir taisou', 'izin taisou', 'tidak hadir taisou'].forEach(v=>{const o=document.createElement('option');o.value=v;o.textContent=v||'';selT.appendChild(o);});
    selT.value=obj.t||''; selT.addEventListener('change',()=>{obj.t=selT.value; updateTotalsCells(td.parentElement,monthKey,rIdx);});
    wrap.appendChild(selT);
  }

  const score=document.createElement('input'); score.type='number'; score.className='score'; score.min='0'; score.max='100'; score.step='1'; score.placeholder='Nilai';
  score.value=(obj.s===null||obj.s==='')?'':obj.s;
  const handleScore=()=>{let v=String(score.value||'').trim(); if(v===''){obj.s=null; setScoreVisual(score,null);} else{let n=Number(v); if(isNaN(n)) n=null; else n=Math.max(0,Math.min(100,n)); obj.s=n; if(n!==null){ obj.a='hadir'; selMain.value='hadir'; applyTDColor(td,'hadir'); } setScoreVisual(score,n);} updateTotalsCells(td.parentElement,monthKey,rIdx);};
  ['input','change','keyup','blur'].forEach(evt=>score.addEventListener(evt,handleScore));
  wrap.appendChild(score); td.appendChild(wrap);
  setScoreVisual(score,obj.s); applyTDColor(td,obj.a);
}

function countTotals(rowObjs, monthKey){
  let sakit=0,hadir=0,alpa=0,izin=0, izinTai=0, tdkTai=0, hanCnt=0, sum=0, cnt=0;
  for(let cIdx=0;cIdx<rowObjs.length;cIdx++){
    const o=rowObjs[cIdx];
    if(o.a==='sakit') sakit++; else if(o.a==='hadir') hadir++; else if(o.a==='alpa') alpa++; else if(o.a==='izin') izin++; else if(o.a==='半') hanCnt++;
    if(o.t==='izin taisou') izinTai++; if(o.t==='tidak hadir taisou') tdkTai++;
    const d = DATES[monthKey][cIdx];
    if(!isSunday(d) && o.s!==null && o.s!=='' && !isNaN(o.s)){ sum+=Number(o.s); cnt++; }
  }
  const avg = cnt ? (sum/cnt) : null;
  return {sakit,hadir,alpa,izin,izinTai,tdkTai,hanCnt,avg};
}
function updateTotalsCells(tr, monthKey, rIdx){
  const t=countTotals(DATA[monthKey][rIdx], monthKey);
  const tds=tr.querySelectorAll('.totals-cell');
  tds[0].textContent=t.hadir; tds[1].textContent=t.sakit; tds[2].textContent=t.izin; tds[3].textContent=t.alpa;
  tds[4].textContent=t.hanCnt; tds[5].textContent=t.izinTai; tds[6].textContent=t.tdkTai;
  tds[7].textContent=(t.avg===null?'':t.avg.toFixed(1)); if(t.avg!==null && t.avg<70) tds[7].classList.add('avg-low'); else tds[7].classList.remove('avg-low');
}

function buildBody(monthKey){
  tbody.innerHTML='';
  const dates=DATES[monthKey];
  PEOPLE.forEach((person,rIdx)=>{
    const tr=document.createElement('tr');
    const tdNo=document.createElement('td'); tdNo.className='sticky no'; tdNo.textContent=rIdx+1; tr.appendChild(tdNo);

    const tdName=document.createElement('td'); tdName.className='sticky name';
    const nameWrap=document.createElement('div'); nameWrap.className='name-box';
    const input=document.createElement('input'); input.className='name-input'; input.value=person.name;
    input.addEventListener('change',()=>{person.name=input.value; pushToActive();});
    const autoBtn=document.createElement('button'); autoBtn.className='mini-fill'; autoBtn.textContent='＋ Nilai';
    autoBtn.title='Isi nilai otomatis (rentang tanggal) untuk baris ini';
    autoBtn.addEventListener('click',()=>openRowFillModal(rIdx));
    const delBtn=document.createElement('button'); delBtn.className='act-btn danger'; delBtn.textContent='Hapus';
    delBtn.addEventListener('click',()=>{ if(confirm(`Hapus ${person.name}?`)) removePerson(rIdx); });
    nameWrap.appendChild(input); nameWrap.appendChild(autoBtn); nameWrap.appendChild(delBtn);
    tdName.appendChild(nameWrap); tr.appendChild(tdName);

    DATA[monthKey][rIdx]?.forEach((obj,cIdx)=>{
      const td=document.createElement('td'); const date=dates[cIdx];
      if(isWeekend(date)) td.classList.add('holiday');
      buildCellContent(td,obj,rIdx,cIdx,monthKey,date); tr.appendChild(td);
    });

    ['hadir','sakit','izin','alpa','han','izinTai','tdkTai','avg'].forEach(k=>{
      const td=document.createElement('td'); td.className='totals-cell'+(k==='avg'?' avg-col':''); tr.appendChild(td);
    });

    tbody.appendChild(tr);
    updateTotalsCells(tr,monthKey,rIdx);
  });
}

/* ===== Bulk fill per TANGGAL (header ＋) ===== */
const orderModal=document.getElementById('orderModal'); let orderResolve=null;
const openOrderModal=()=>{orderModal.style.display='flex';return new Promise(res=>orderResolve=res)};
const closeOrderModal=()=>{orderModal.style.display='none';orderResolve=null};
document.getElementById('orderCancel').addEventListener('click',()=>{orderResolve&&orderResolve(null);closeOrderModal()});
document.getElementById('orderMutlak').addEventListener('click',()=>{orderResolve&&orderResolve('mutlak');closeOrderModal()});
document.getElementById('orderAbjad').addEventListener('click',()=>{orderResolve&&orderResolve('abjad');closeOrderModal()});

async function bulkFillForDate(monKey,cIdx){
  const d=DATES[monKey][cIdx]; if(isSunday(d)){alert('Tidak bisa mengisi nilai otomatis pada Minggu.');return;}
  const mode=await openOrderModal(); if(!mode) return;

  let orderUpper=[];
  if(mode==='mutlak'){ orderUpper = (ABSOLUTE_ORDER||[]).slice(); }
  else{ orderUpper = PEOPLE.map(p=>(p.name||'').trim().toUpperCase()).sort((a,b)=>a.localeCompare(b,'id',{sensitivity:'base'})); }

  const tgl=d.toLocaleDateString('id-ID',{day:'2-digit',month:'long',year:'numeric'});
  const sample=`89\n84\n87\n87\n87\n81\n79\n-5\n-10\n74\n77\n84\n71\n80\n74\n77\n74\n74`;
  const inText=prompt(`Tempel ${orderUpper.length} nilai urut (${mode.toUpperCase()}) untuk ${tgl}:`,sample); if(inText==null) return;

  const arr=String(inText).trim().split(/[\s,;]+/).map(Number).filter(n=>!isNaN(n));
  if(arr.length!==orderUpper.length){ alert(`Butuh ${orderUpper.length} nilai, kamu memasukkan ${arr.length}.`); return; }

  const nameToRow=new Map(PEOPLE.map((p,i)=>[(p.name||'').trim().toUpperCase(),i]));
  for(let i=0;i<orderUpper.length;i++){
    const nm=orderUpper[i]; const rIdx=nameToRow.get(nm); if(rIdx==null) continue;
    let n=arr[i];
    if(isSaturday(d)) n=Math.max(-100,Math.min(100,n)); else n=Math.max(0,Math.min(100,n));
    const cell=DATA[monKey][rIdx][cIdx]; cell.s=n; if(!isSaturday(d)) cell.a='hadir';
  }
  renderAll();
}

/* ===== Isi nilai otomatis PER NAMA (modal) ===== */
const rowFillModal=document.getElementById('rowFillModal');
const rowFillName=document.getElementById('rowFillName');
const rowFillStart=document.getElementById('rowFillStart');
const rowFillEnd=document.getElementById('rowFillEnd');
const rowFillValues=document.getElementById('rowFillValues');
let rowFillIdx=null;

function openRowFillModal(rIdx){
  rowFillIdx=rIdx;
  rowFillName.textContent=PEOPLE[rIdx]?.name||'Siswa';
  const dates=DATES[monthSel.value];
  rowFillStart.value=1;
  rowFillEnd.value=dates[dates.length-1].getDate();
  rowFillValues.value='';
  rowFillModal.style.display='flex';
}
function closeRowFillModal(){ rowFillModal.style.display='none'; rowFillIdx=null; }
document.getElementById('rowFillCancel').addEventListener('click',closeRowFillModal);
document.getElementById('rowFillApply').addEventListener('click',()=>{
  if(rowFillIdx==null) return;
  const monKey=monthSel.value, dates=DATES[monKey];
  const sDay=Math.max(1, Math.min(31, parseInt(rowFillStart.value||'1')));
  const eDay=Math.max(1, Math.min(31, parseInt(rowFillEnd.value||'31')));
  const [from,to]= sDay<=eDay ? [sDay,eDay] : [eDay,sDay];

  const nums=String(rowFillValues.value||'').trim().split(/[\s,;]+/).map(Number).filter(n=>!isNaN(n));
  if(!nums.length){ alert('Daftar nilai masih kosong.'); return; }

  const idxs=[];
  for(let i=0;i<dates.length;i++){
    const d=dates[i]; const day=d.getDate();
    if(day<from || day>to) continue;
    if(isSunday(d)) continue;
    idxs.push(i);
  }
  if(!idxs.length){ alert('Tidak ada hari yang valid dalam rentang itu.'); return; }

  const len=Math.min(nums.length, idxs.length);
  let applied=0;
  for(let k=0;k<len;k++){
    const i=idxs[k]; const d=dates[i]; let n=nums[k];
    if(isNaN(n)) continue;
    if(isSaturday(d)) n=Math.max(-100,Math.min(100,n));
    else              n=Math.max(0,Math.min(100,n));
    const cell=DATA[monKey][rowFillIdx][i];
    cell.s=n;
    if(!isSaturday(d)) cell.a='hadir';
    applied++;
  }
  closeRowFillModal();
  renderAll();
  if(nums.length!==idxs.length){
    alert(`Diterapkan ${applied} nilai. (${nums.length} nilai vs ${idxs.length} hari dalam rentang)`);
  }
});

/* ===== Clear tanggal ===== */
let pendingClear=null;
const clearDayModal=document.getElementById('clearDayModal');
const clearDayLabel=document.getElementById('clearDayLabel'); /* <-- FIX: kurungnya benar */
function openClearDayModal(monKey,cIdx){
  pendingClear={monKey,cIdx};
  const d=DATES[monKey][cIdx];
  clearDayLabel.textContent='Tanggal: '+d.toLocaleDateString('id-ID',{day:'2-digit',month:'long',year:'numeric'});
  clearDayModal.style.display='flex';
}
const closeClearDayModal=()=>{clearDayModal.style.display='none';pendingClear=null};
document.getElementById('clearDayCancel').addEventListener('click',closeClearDayModal);
document.getElementById('clearDayScores').addEventListener('click',()=>{ if(!pendingClear) return; const {monKey,cIdx}=pendingClear; for(let r=0;r<PEOPLE.length;r++){ DATA[monKey][r][cIdx].s=null; } closeClearDayModal(); renderAll(); });
document.getElementById('clearDayBoth').addEventListener('click',()=>{ if(!pendingClear) return; const {monKey,cIdx}=pendingClear; for(let r=0;r<PEOPLE.length;r++){ DATA[monKey][r][cIdx]={a:'',t:'',s:null}; } closeClearDayModal(); renderAll(); });

/* ===== Print ===== */
const printModal=document.getElementById('printModal');
const openPrintModal=()=>{printModal.style.display='flex'}; const closePrintModal=()=>{printModal.style.display='none'};
document.getElementById('btnPrint').addEventListener('click',openPrintModal);
document.getElementById('printCancel').addEventListener('click',closePrintModal);
document.getElementById('printOrderMutlak').addEventListener('click',()=>{buildPrintSummary('mutlak');closePrintModal();window.print();});
document.getElementById('printOrderAbjad').addEventListener('click',()=>{buildPrintSummary('abjad');closePrintModal();window.print();});
document.getElementById('printOrderRank').addEventListener('click',()=>{buildPrintSummary('rank');closePrintModal();window.print();});

function buildPrintSummary(orderMode){
  pushToActive();
  const monthKey=monthSel.value, dates=DATES[monthKey];
  const psTitle=document.getElementById('psTitle'); const psMeta=document.getElementById('psMeta'); const psBody=document.getElementById('psBody');

  psTitle.textContent=(TITLE||'Kelas')+' — Rekap '+dates[0].toLocaleDateString('id-ID',{month:'long',year:'numeric'});
  psMeta.textContent='Urutan: '+(orderMode==='mutlak'?'Mutlak/Awal':orderMode==='abjad'?'Abjad (A→Z)':'Ranking (rata-rata turun)')+' — Hanya nama, akumulasi, rata-rata nilai (kecuali Minggu).';

  let orderIdx=[];
  if(orderMode==='mutlak'){
    const map=new Map(PEOPLE.map((p,i)=>[(p.name||'').trim().toUpperCase(),i]));
    orderIdx=(ABSOLUTE_ORDER||[]).map(nm=>map.has(nm)?map.get(nm):null).filter(i=>i!==null);
    for(let i=0;i<PEOPLE.length;i++){ if(!orderIdx.includes(i)) orderIdx.push(i); }
  }else if(orderMode==='abjad'){
    orderIdx=PEOPLE.map((p,i)=>[i,(p.name||'')]).sort((A,B)=>A[1].localeCompare(B[1],'id',{sensitivity:'base'})).map(x=>x[0]);
  }else{
    orderIdx=PEOPLE.map((p,i)=>{const t=countTotals(DATA[monthKey][i],monthKey); const avg=(t.avg==null||isNaN(t.avg))?-Infinity:t.avg; return {i,avg,name:(p.name||'')};})
                    .sort((A,B)=> (B.avg!==A.avg)?(B.avg-A.avg):A.name.localeCompare(B.name,'id',{sensitivity:'base'}))
                    .map(x=>x.i);
  }

  psBody.innerHTML='';
  for(let k=0;k<orderIdx.length;k++){
    const r=orderIdx[k]; const t=countTotals(DATA[monthKey][r],monthKey);
    const tr=document.createElement('tr');
    tr.innerHTML=`<td>${k+1}</td><td style="text-align:left">${PEOPLE[r].name||''}</td>
      <td>${t.hadir}</td><td>${t.sakit}</td><td>${t.izin}</td><td>${t.alpa}</td><td>${t.hanCnt}</td>
      <td>${t.izinTai}</td><td>${t.tdkTai}</td><td>${t.avg==null?'':t.avg.toFixed(1)}</td>`;
    psBody.appendChild(tr);
  }
}

/* ===== Render & CRUD ===== */
function renderAll(){ pushToActive(); const key=monthSel.value; ensureMatrixShape(); buildHeader(key); buildBody(key); }
function ensureMatrixShape(){ MONTHS.forEach(mon=>{const rows=PEOPLE.length; if(!Array.isArray(DATA[mon])) DATA[mon]=[]; while(DATA[mon].length<rows) DATA[mon].push(DATES[mon].map(()=>({a:'',t:'',s:null}))); while(DATA[mon].length>rows) DATA[mon].pop(); }); }
function clearAll(){ if(!confirm('Hapus SEMUA data termasuk NAMA pada kelas ini?')) return; PEOPLE.length=0; MONTHS.forEach(mon=>DATA[mon]=[]); renderAll(); }

/* ===== Export/Import & Sync hooks ===== */
function collectAllDataV2(){ pushToActive(); return {version:2,month_keys:MONTHS,months:{september:DATES.september.map(toLocalYMD),oktober:DATES.oktober.map(toLocalYMD),november:DATES.november.map(toLocalYMD)},active:ACTIVE_ID,classes:Object.values(CLASSES).map(c=>({id:c.id,name:c.name,absoluteOrder:c.absoluteOrder,people:c.people,values:c.values}))}; }
function applyAllDataV1(obj){ const id=slug(obj.title||'Kelas')||'kelas'; CLASSES={}; CLASSES[id]={id,name:obj.title||'Kelas',absoluteOrder:(obj.people||[]).map(p=>(p.name||'').toUpperCase()),people:(obj.people||[]).map(p=>({name:p.name||''})),values:{september:[],oktober:[],november:[]}}; ACTIVE_ID=id; MONTHS.forEach(mon=>{const cols=DATES[mon].length; const incoming=obj.values?.[mon]||[]; CLASSES[id].values[mon]=CLASSES[id].people.map((_,r)=>{const src=incoming[r]||[]; const row=[]; for(let c=0;c<cols;c++){ row.push(coerceCell(mon,c,src[c])); } return row;});}); refreshClassSelector(); renderAll(); }
function applyAllDataV2(obj){ const arr=Array.isArray(obj.classes)?obj.classes:[]; if(!arr.length) throw new Error('Tidak ada classes.'); CLASSES={}; arr.forEach(c=>{const id=c.id||slug(c.name||'kelas')||'kelas'; CLASSES[id]={id,name:c.name||'Kelas',absoluteOrder:Array.isArray(c.absoluteOrder)?c.absoluteOrder:[],people:Array.isArray(c.people)?c.people.map(p=>({name:p.name||''})):[],values:{september:[],oktober:[],november:[]}}; MONTHS.forEach(mon=>{const cols=DATES[mon].length; const incoming=c.values?.[mon]||[]; CLASSES[id].values[mon]=CLASSES[id].people.map((_,r)=>{const src=incoming[r]||[]; const row=[]; for(let ci=0;ci<cols;ci++){ row.push(coerceCell(mon,ci,src[ci])); } return row;});});}); ACTIVE_ID=obj.active&&CLASSES[obj.active]?obj.active:Object.keys(CLASSES)[0]; refreshClassSelector(); renderAll(); }
function coerceCell(mon,c,raw){
  const d=DATES[mon][c]; const day=d.getDay(); // 0=Min, 6=Sabtu
  if(raw==null) return {a:'',t:'',s:null};
  if(typeof raw==='object'){
    const a=raw.a||''; const t=raw.t||''; let s=(raw.s===undefined?null:raw.s);
    if(day===0) s=null;
    if(day===6 && s!=null) s=Math.max(-100,Math.min(100,Number(s)));
    if(day!==6 && day!==0 && s!=null) s=Math.max(0,Math.min(100,Number(s)));
    return {a,t,s};
  }
  let n=Number(raw);
  if(!isNaN(n)){
    if(day===0) return {a:'',t:'',s:null};
    if(day===6) return {a:'',t:'',s:Math.max(-100,Math.min(100,n))};
    return {a:'hadir',t:'',s:Math.max(0,Math.min(100,n))};
  }
  const txt=String(raw).toLowerCase(); const allowed={'hadir':1,'sakit':1,'izin':1,'alpa':1,'半':1};
  return {a:(allowed[txt]?txt:''),t:'',s:null};
}

/* ===== Nama & sort ===== */
function saveToLocal(){} function loadFromLocal(){return false} function clearLocal(){}
function sortAZ(){const idxs=PEOPLE.map((_,i)=>i).sort((a,b)=>(PEOPLE[a].name||'').toLowerCase().localeCompare((PEOPLE[b].name||'').toLowerCase())); PEOPLE=idxs.map(i=>PEOPLE[i]); MONTHS.forEach(mon=>{DATA[mon]=idxs.map(i=>DATA[mon][i]);}); renderAll();}
function sortMutlak(){const map=new Map(PEOPLE.map((p,i)=>[(p.name||'').trim().toUpperCase(),i])); let idxs=(ABSOLUTE_ORDER||[]).map(nm=>map.has(nm)?map.get(nm):null).filter(i=>i!==null); for(let i=0;i<PEOPLE.length;i++){ if(!idxs.includes(i)) idxs.push(i); } PEOPLE=idxs.map(i=>PEOPLE[i]); MONTHS.forEach(mon=>{DATA[mon]=idxs.map(i=>DATA[mon][i]);}); renderAll();}
function addPerson(name){name=name&&name.trim(); if(!name) return; const exists=PEOPLE.some(p=>(p.name||'').trim().toUpperCase()===name.toUpperCase()); if(exists) return; PEOPLE.push({name}); MONTHS.forEach(mon=>DATA[mon].push(DATES[mon].map(()=>({a:'',t:'',s:null})))); document.getElementById('newName').value=''; renderAll();}
function removePerson(rIdx){PEOPLE.splice(rIdx,1); MONTHS.forEach(mon=>DATA[mon].splice(rIdx,1)); renderAll();}

/* ===== Tambah nama massal ===== */
const bulkAddModal=document.getElementById('bulkAddModal'), bulkAddArea=document.getElementById('bulkAddArea'), bulkReplace=document.getElementById('bulkReplace');
document.getElementById('btnBulkAdd').addEventListener('click',()=>{bulkAddArea.value='';bulkReplace.checked=false;bulkAddModal.style.display='flex';});
document.getElementById('bulkAddCancel').addEventListener('click',()=>{bulkAddModal.style.display='none';});
document.getElementById('bulkAddApply').addEventListener('click',()=>{const lines=parseNames(bulkAddArea.value); if(!lines.length){alert('Daftar nama kosong.');return;} if(bulkReplace.checked){PEOPLE=lines.map(n=>({name:n})); MONTHS.forEach(mon=>{DATA[mon]=PEOPLE.map(()=> DATES[mon].map(()=>({a:'',t:'',s:null})));}); ABSOLUTE_ORDER=lines.map(n=>n.toUpperCase());} else {const set=new Set(PEOPLE.map(p=>(p.name||'').trim().toUpperCase())); lines.forEach(n=>{if(!set.has(n.toUpperCase())){PEOPLE.push({name:n}); MONTHS.forEach(mon=> DATA[mon].push(DATES[mon].map(()=>({a:'',t:'',s:null})))); set.add(n.toUpperCase());}});} bulkAddModal.style.display='none'; renderAll();});

/* ===== Atur urutan mutlak ===== */
const orderEditModal=document.getElementById('orderEditModal'), orderEditArea=document.getElementById('orderEditArea');
document.getElementById('btnSetOrder').addEventListener('click',()=>{orderEditArea.value='';orderEditModal.style.display='flex';});
document.getElementById('orderEditCancel').addEventListener('click',()=>{orderEditModal.style.display='none';});
document.getElementById('orderFillFromPeople').addEventListener('click',()=>{orderEditArea.value=PEOPLE.map(p=>p.name||'').join('\n');});
document.getElementById('orderFillFromAbsolute').addEventListener('click',()=>{orderEditArea.value=(ABSOLUTE_ORDER||[]).join('\n');});
document.getElementById('orderEditApply').addEventListener('click',()=>{const lines=parseNames(orderEditArea.value).map(s=>s.toUpperCase()); if(!lines.length){alert('Daftar urutan kosong.');return;} ABSOLUTE_ORDER=lines; orderEditModal.style.display='none'; alert('Urutan mutlak disimpan. Gunakan tombol "Urut Mutlak" untuk menerapkan.');});

/* ===== Init & Events ===== */
pullFromActive(); renderAll();
document.getElementById('btnClear').addEventListener('click',clearAll);
document.getElementById('btnSortAZ').addEventListener('click',sortAZ);
document.getElementById('btnSortMutlak').addEventListener('click',sortMutlak);
document.getElementById('btnAdd').addEventListener('click',()=>addPerson(document.getElementById('newName').value.trim()));
document.getElementById('newName').addEventListener('keypress',e=>{if(e.key==='Enter'){e.preventDefault();document.getElementById('btnAdd').click();}});
monthSel.addEventListener('change',()=>renderAll());
document.getElementById('btnSave').addEventListener('click',()=>{const blob=new Blob([JSON.stringify(collectAllDataV2())],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='absensi_multi_kelas.json'; a.click();});
const fileInput=document.getElementById('fileInput'); document.getElementById('btnLoad').addEventListener('click',()=>fileInput.click());
fileInput.addEventListener('change',e=>{const f=e.target.files[0]; if(!f) return; const rdr=new FileReader(); rdr.onload=()=>{try{const obj=JSON.parse(rdr.result); if(obj&&Array.isArray(obj.classes)) applyAllDataV2(obj); else if(obj&&obj.values) applyAllDataV1(obj); else throw new Error('schema tidak dikenal');}catch(err){console.error(err);alert('File tidak valid / schema tidak dikenal.');}}; rdr.readAsText(f); fileInput.value='';});

/* ===== Kompat Sync ===== */
window.collectAllData=function(){try{return collectAllDataV2();}catch(e){console.error(e);alert('Gagal menyiapkan data untuk Sync.');return null;}};
window.applyAllData=function(obj){try{if(obj&&Array.isArray(obj.classes)) applyAllDataV2(obj); else if(obj&&obj.values) applyAllDataV1(obj); else throw new Error('Schema tidak dikenal'); renderAll(); return true;}catch(e){console.error(e);alert('Data dari Sync tidak cocok.');return false;}};
</script>
  <script>
/* ==== Auto Sync to Gist — drop-in untuk app.html ==== */
(() => {
  const LS = { id:'sync.gistId', tok:'sync.token', file:'sync.filename', doc:'sync.docUrl' };
  const SYNC = {
    id:   localStorage.getItem(LS.id)  || '',
    tok:  localStorage.getItem(LS.tok) || '',
    file: localStorage.getItem(LS.file)|| 'absensi-n4-rasen.json',
    etag: null,           // diisi saat pull
    dirty: false,         // ada perubahan lokal?
    pullEveryMs: 5 * 60_000,  // cek update remote tiap 5 menit
    pushDebounceMs: 2_000,    // tunda 2 detik sejak edit terakhir
  };

  // --- UI helper (opsional): update indikator kalau ada elemen status ---
  const $ = s => document.querySelector(s);
  function setStatus(text, kind='info') {
    // cari elemen yang mungkin kamu punya; kalau tidak ada, skip
    const el = $('#sync-status') || document.querySelector('[data-sync-status]');
    if (el) el.textContent = text;
    // kalau ada titik warna ala panelmu:
    const dot = $('#sync-dot') || document.querySelector('[data-sync-dot]');
    if (dot) {
      dot.style.background = ({ok:'#2ecc71', err:'#ff5470', warn:'#ffbd59', info:'#9fb0c2'})[kind] || '#9fb0c2';
    }
    // fallback ke console
    console.log('[Sync]', text);
  }

  // --- GitHub helpers ---
  const GH = {
    url() { return `https://api.github.com/gists/${SYNC.id}`; },
    headers(extra = {}) {
      return Object.assign({
        'Authorization': 'Bearer ' + SYNC.tok,
        'Accept': 'application/vnd.github+json'
      }, extra);
    }
  };

  async function pullOnce() {
    if (!SYNC.id || !SYNC.tok) { setStatus('Sync: kredensial belum terset', 'err'); return; }
    setStatus('Sync: memuat dari Gist…', 'warn');
    const res = await fetch(GH.url(), {
      headers: SYNC.etag ? GH.headers({'If-None-Match': SYNC.etag}) : GH.headers()
    });
    if (res.status === 304) { setStatus('Sync: up-to-date'); return; }
    if (res.status === 404) { setStatus('GitHub API 404 — Gist tidak ditemukan/izin kurang', 'err'); return; }
    if (res.status === 401) { setStatus('GitHub API 401 — Token tidak valid', 'err'); return; }
    if (!res.ok)          { setStatus('GitHub API ' + res.status, 'err'); return; }

    SYNC.etag = res.headers.get('ETag') || null;
    const j = await res.json();
    const f = j.files && j.files[SYNC.file];
    if (!f) { setStatus(`File "${SYNC.file}" tidak ada di Gist`, 'err'); return; }

    let txt = f.content || '';
    if (f.truncated && f.raw_url) txt = await fetch(f.raw_url).then(r => r.text());

    try {
      const data = JSON.parse(txt);
      if (typeof window.applyAllData === 'function') {
        window.applyAllData(data);
      }
      SYNC.dirty = false;
      setStatus('Sync: termuat dari Gist', 'ok');
    } catch (e) {
      setStatus('JSON remote tidak valid: ' + e.message, 'err');
    }
  }

  let pushTimer = null;
  function schedulePush() {
    if (!SYNC.id || !SYNC.tok) return;
    SYNC.dirty = true;
    if (pushTimer) clearTimeout(pushTimer);
    pushTimer = setTimeout(pushNow, SYNC.pushDebounceMs);
  }

  async function pushNow() {
    if (!SYNC.dirty) return;
    try {
      const data = typeof window.collectAllData === 'function'
        ? window.collectAllData()
        : null;
      if (!data) return setStatus('collectAllData() tidak tersedia', 'err');

      const body = { files: { [SYNC.file]: { content: JSON.stringify(data, null, 2) } } };
      setStatus('Sync: menyimpan ke Gist…', 'warn');
      const r = await fetch(GH.url(), {
        method: 'PATCH',
        headers: GH.headers({'Content-Type':'application/json'}),
        body: JSON.stringify(body)
      });
      if (!r.ok) { setStatus('Gagal simpan: ' + r.status, 'err'); return; }
      SYNC.etag = r.headers.get('ETag') || SYNC.etag;
      SYNC.dirty = false;
      setStatus('Sync: tersimpan', 'ok');
    } catch (e) {
      setStatus('Gagal simpan: ' + e.message, 'err');
    }
  }

  // --- Wiring: auto-pull on load, auto-push on changes, periodic refresh ---
  function startAutoSync() {
    if (!SYNC.id || !SYNC.tok) {
      setStatus('Sync otomatis off — kredensial kosong (buka index.html dulu)', 'err');
      return;
    }
    pullOnce(); // initial load

    // deteksi perubahan form / input → jadwalkan push
    // (kalau app punya container utama, ganti document.body dengan container tsb)
    document.body.addEventListener('input',  schedulePush, true);
    document.body.addEventListener('change', schedulePush, true);

    // refresh remote tiap beberapa menit (pakai ETag untuk hemat)
    setInterval(pullOnce, SYNC.pullEveryMs);

    // expose untuk dipakai manual
    window.SyncCloud = {
      pull: pullOnce,
      push: pushNow,
      configure({id, token, file}) {
        if (id)   { SYNC.id = id;   localStorage.setItem(LS.id, id); }
        if (token){ SYNC.tok = token;localStorage.setItem(LS.tok, token); }
        if (file) { SYNC.file = file;localStorage.setItem(LS.file, file); }
      }
    };

    setStatus('Sync otomatis aktif');
  }

  // mulai!
  document.addEventListener('DOMContentLoaded', startAutoSync);
})();
</script>


<!-- ==== Simpan ke Gist (inline, tanpa localStorage) ==== -->
<script>
(() => {
  const DOC_URL  = 'https://docs.google.com/document/u/1/d/e/2PACX-1vSw0DNyopCzYwRF9LuAnecyNE_sv0HJYplvaj38ZfRfLj8SmVYJwjMxCi-clKmuIktBOwN8jlGTpaEI/pub?output=txt';
  const FILE_NAME= 'absensi-n4-rasen.json';
  const tokenRe  = /(?:gh[pous]_[A-Za-z0-9_\-]{20,}|github_pat_[A-Za-z0-9_\-]{20,})/;

  function bubble(msg) {
    let b = document.getElementById('gist-bubble');
    if(!b){ b = document.createElement('div'); b.id='gist-bubble';
      Object.assign(b.style, {position:'fixed',right:'18px',bottom:'68px',background:'#0f1724',color:'#dfe8f5',border:'1px solid #213144',borderRadius:'10px',padding:'8px 10px',fontSize:'12px',fontFamily:'system-ui,-apple-system,Segoe UI,Roboto,Arial',zIndex:99999,display:'none'});
      document.body.appendChild(b);
    }
    b.textContent = msg; b.style.display='block'; clearTimeout(b._t); b._t = setTimeout(()=> b.style.display='none', 3000);
  }

  function ensureButton() {
    if (document.getElementById('btnSaveGistCloud')) return;
    const btn = document.createElement('button');
    btn.id = 'btnSaveGistCloud';
    btn.textContent = 'Simpan ke Gist';
    Object.assign(btn.style, {position:'fixed', right:'18px', bottom:'18px', zIndex:99999,
      background:'#4593ff', color:'#061a2e', border:'1px solid #1a5bb8', borderRadius:'12px', padding:'12px 16px', fontWeight:'700', cursor:'pointer',
      boxShadow:'0 10px 28px rgba(0,0,0,.35)'});
    btn.addEventListener('click', saveNow);
    document.body.appendChild(btn);
  }

  async function getCreds() {
    const res = await fetch(DOC_URL, {mode:'cors'});
    if(!res.ok) throw new Error('Gagal ambil GDocs ('+res.status+')');
    const txt = await res.text();
    const id = (txt.match(/\b[a-f0-9]{32}\b/i) || [])[0];
    const tk = (txt.match(tokenRe) || [])[0];
    if(!id || !tk) throw new Error('ID/Token tidak ditemukan di dokumen');
    return { id, tk };
  }

  async function saveNow() {
    try {
      bubble('Mengambil kredensial…');
      const {id, tk} = await getCreds();
      const collect = window.collectAllData || window.collectAllDataV2;
      if(typeof collect !== 'function') throw new Error('collectAllData() tidak ditemukan');
      const data = collect();
      bubble('Menyimpan ke Gist…');
      const r = await fetch('https://api.github.com/gists/'+id, {
        method:'PATCH',
        headers: { 'Authorization':'Bearer '+tk, 'Accept':'application/vnd.github+json', 'Content-Type':'application/json' },
        body: JSON.stringify({ files: { [FILE_NAME]: { content: JSON.stringify(data, null, 2) } } })
      });
      if(r.status===404) throw new Error('404 — Gist tidak ditemukan/izin kurang');
      if(r.status===401) throw new Error('401 — Token tidak valid');
      if(!r.ok) throw new Error('HTTP '+r.status);
      bubble('Tersimpan ✓');
    } catch(e) {
      console.error(e); bubble('Gagal: '+e.message); alert('Gagal menyimpan ke Gist: '+e.message);
    }
  }

  document.addEventListener('DOMContentLoaded', ensureButton);
})();
</script>
</body>
</html>
